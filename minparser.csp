# Generated by Extended CovScript Compiler
# DO NOT MODIFY
# Date: Thu Oct 30 15:12:01 2025
import ecs as minparser_ecs
package minparser
import parsergen
import regex
constant syntax = parsergen.syntax
var id_lexcicals = {"ASCII" : "^[A-Za-z_]\\w*$", "UTF8" : "^[A-Za-z_\\u4E00-\\u9FA5\\u9FA6-\\u9FEF\\u3007](\\w|[\\u4E00-\\u9FA5\\u9FA6-\\u9FEF\\u3007])*$", "GBK" : "^[A-Za-z_\\uB0A1-\\uF7FE\\u8140-\\uA0FE\\uAA40-\\uFEA0\\uA996](\\w|[\\uB0A1-\\uF7FE\\u8140-\\uA0FE\\uAA40-\\uFEA0\\uA996])*$"}.to_hash_map()
function get_lexical(reg_builder, cvt_name)
		return {"endl" : reg_builder("^\\n+$"), "id" : reg_builder(id_lexcicals.at(cvt_name)), "num" : reg_builder("^[0-9]+\\.?([0-9]+)?$"), "str" : reg_builder("^(\"|\"([^\"]|\\\\\")*\"?)$"), "char" : reg_builder("^(\'|\'([^\']|\\\\(0|\\\\|\'|\"|\\w))\'?)$"), "bsig" : reg_builder("^(;|:=?|::|\\?|\\.\\.?|\\.\\.\\.)$"), "msig" : reg_builder("^(\\+(\\+|=)?|-(-|=|>)?|\\*=?|/=?|%=?|\\^=?)$"), "lsig" : reg_builder("^(>|<|&|(\\|)|&&|(\\|\\|)|!|=(=|>)?|!=?|>=?|<=?)$"), "brac" : reg_builder("^(\\(|\\)|\\[|\\]|\\{|\\}|,)$"), "ign" : reg_builder("^([ \\f\\r\\t\\v]+|#.*)$"), "err" : reg_builder("^(\"|\'|(\\|)|\\.\\.)$")}.to_hash_map()
	end
var covscript_syntax = {"begin" : {syntax.ref("stmts")}, "ignore" : {syntax.repeat(syntax.token("endl"))}, "endline" : {syntax.cond_or({syntax.token("endl")}, {syntax.term(";")})}, "stmts" : {syntax.repeat(syntax.nlook(syntax.ref("endblock")), syntax.ref("statement"), syntax.repeat(syntax.token("endl")))}, "decl-stmts" : {syntax.repeat(syntax.nlook(syntax.ref("endblock")), syntax.ref("declaration"), syntax.repeat(syntax.token("endl")))}, "endblock" : {syntax.cond_or({syntax.ref("end-stmt")}, {syntax.ref("else-stmt")})}, "statement" : {syntax.cond_or({syntax.ref("var-stmt")}, {syntax.ref("block-stmt")}, {syntax.ref("namespace-stmt")}, {syntax.ref("if-stmt")}, {syntax.ref("loop-stmt")}, {syntax.ref("control-stmt")}, {syntax.ref("expr-stmt")})}, "declaration" : {syntax.cond_or({syntax.ref("namespace-stmt")}, {syntax.ref("var-stmt")})}, "var-def" : {syntax.cond_or({syntax.ref("var-bind"), syntax.term("="), syntax.ref("basic-expr")}, {syntax.ref("var-list")})}, "var-stmt" : {syntax.cond_or({syntax.term("var")}, {syntax.term("link")}, {syntax.term("constant")}), syntax.ref("var-def"), syntax.ref("endline")}, "var-bind" : {syntax.term("("), syntax.ref("var-bind-list"), syntax.repeat(syntax.term(","), syntax.ref("var-bind-list")), syntax.term(")")}, "var-bind-list" : {syntax.cond_or({syntax.token("id")}, {syntax.term("...")}, {syntax.ref("var-bind")})}, "var-list" : {syntax.token("id"), syntax.cond_or({syntax.term("="), syntax.ref("basic-expr")}, {syntax.term("as"), syntax.ref("unary-expr"), syntax.optional(syntax.ref("array"))}), syntax.optional(syntax.term(","), syntax.ref("var-list"))}, "block-stmt" : {syntax.term("block"), syntax.token("endl"), syntax.ref("stmts"), syntax.term("end"), syntax.token("endl")}, "namespace-stmt" : {syntax.term("namespace"), syntax.token("id"), syntax.token("endl"), syntax.ref("decl-stmts"), syntax.term("end"), syntax.token("endl")}, "if-stmt" : {syntax.term("if"), syntax.ref("basic-expr"), syntax.token("endl"), syntax.ref("stmts"), syntax.repeat(syntax.ref("else-stmt"), syntax.ref("stmts")), syntax.term("end"), syntax.token("endl")}, "else-stmt" : {syntax.term("else"), syntax.optional(syntax.nlook(syntax.token("endl")), syntax.term("if"), syntax.ref("basic-expr")), syntax.token("endl")}, "loop-stmt" : {syntax.term("loop"), syntax.token("endl"), syntax.ref("stmts"), syntax.term("end"), syntax.token("endl")}, "control-stmt" : {syntax.cond_or({syntax.term("break")}, {syntax.term("continue")}), syntax.ref("endline")}, "expr-stmt" : {syntax.ref("expr"), syntax.ref("endline")}, "end-stmt" : {syntax.term("end"), syntax.token("endl")}, "expr" : {syntax.ref("basic-expr"), syntax.optional(syntax.term(","), syntax.ref("expr"))}, "bind-expr" : {syntax.term("("), syntax.ref("bind-list"), syntax.repeat(syntax.term(","), syntax.ref("bind-list")), syntax.term(")")}, "bind-list" : {syntax.cond_or({syntax.token("id")}, {syntax.term("...")}, {syntax.ref("bind-expr")})}, "basic-expr" : {syntax.cond_or({syntax.ref("bind-expr"), syntax.term("="), syntax.ref("cond-expr")}, {syntax.ref("cond-expr"), syntax.optional(syntax.ref("asi-op"), syntax.ref("basic-expr"))})}, "asi-op" : {syntax.cond_or({syntax.term("=")}, {syntax.term(":=")}, {syntax.term("+=")}, {syntax.term("-=")}, {syntax.term("*=")}, {syntax.term("/=")}, {syntax.term("%=")}, {syntax.term("^=")})}, "lambda-expr" : {syntax.term("["), syntax.optional(syntax.ref("capture-list")), syntax.term("]"), syntax.term("("), syntax.optional(syntax.ref("argument-list")), syntax.term(")"), syntax.ref("lambda-body")}, "capture-list" : {syntax.optional(syntax.term("=")), syntax.token("id"), syntax.repeat(syntax.term(","), syntax.ref("capture-list"))}, "argument-list" : {syntax.cond_or({syntax.term("..."), syntax.token("id")}, {syntax.optional(syntax.term("=")), syntax.token("id"), syntax.optional(syntax.term(":"), syntax.ref("visit-expr")), syntax.repeat(syntax.term(","), syntax.ref("argument-list"))})}, "lambda-body" : {syntax.cond_or({syntax.term("{"), syntax.repeat(syntax.ref("statement"), syntax.repeat(syntax.token("endl"))), syntax.term("}")}, {syntax.term("->"), syntax.ref("cond-expr")})}, "cond-expr" : {syntax.cond_or({syntax.ref("logic-or-expr"), syntax.optional(syntax.ref("cond-postfix"))}, {syntax.ref("lambda-expr")})}, "cond-postfix" : {syntax.cond_or({syntax.term("?"), syntax.ref("value-expr"), syntax.term(":"), syntax.ref("cond-expr")}, {syntax.term(":"), syntax.ref("value-expr")})}, "value-expr" : {syntax.cond_or({syntax.ref("logic-or-expr")}, {syntax.ref("lambda-expr")})}, "logic-or-expr" : {syntax.ref("logic-and-expr"), syntax.optional(syntax.cond_or({syntax.term("||")}, {syntax.term("or")}), syntax.ref("logic-or-expr"))}, "logic-and-expr" : {syntax.ref("equal-expr"), syntax.optional(syntax.cond_or({syntax.term("&&")}, {syntax.term("and")}), syntax.ref("logic-and-expr"))}, "equal-expr" : {syntax.ref("relat-expr"), syntax.optional(syntax.cond_or({syntax.term("==")}, {syntax.term("!=")}, {syntax.term("is")}, {syntax.term("not")}), syntax.ref("equal-expr"))}, "relat-expr" : {syntax.ref("add-expr"), syntax.optional(syntax.cond_or({syntax.term(">")}, {syntax.term("<")}, {syntax.term(">=")}, {syntax.term("<=")}), syntax.ref("relat-expr"))}, "add-expr" : {syntax.ref("mul-expr"), syntax.optional(syntax.cond_or({syntax.term("+")}, {syntax.term("-")}), syntax.ref("add-expr"))}, "mul-expr" : {syntax.ref("conv-expr"), syntax.optional(syntax.nlook(syntax.token("endl")), syntax.cond_or({syntax.term("*")}, {syntax.term("/")}, {syntax.term("%")}, {syntax.term("^")}), syntax.ref("mul-expr"))}, "conv-expr" : {syntax.ref("unary-expr"), syntax.optional(syntax.nlook(syntax.token("endl")), syntax.cond_or({syntax.term("=>")}, {syntax.term("as")}), syntax.ref("visit-expr"))}, "unary-expr" : {syntax.cond_or({syntax.ref("unary-op"), syntax.ref("unary-expr")}, {syntax.cond_or({syntax.term("new")}, {syntax.term("gcnew")}), syntax.ref("visit-expr"), syntax.optional(syntax.ref("array"))}, {syntax.ref("prim-expr"), syntax.optional(syntax.nlook(syntax.token("endl")), syntax.ref("postfix-expr"))})}, "unary-op" : {syntax.cond_or({syntax.term("typeid")}, {syntax.term("++")}, {syntax.term("--")}, {syntax.term("*")}, {syntax.term("&")}, {syntax.term("-")}, {syntax.term("!")}, {syntax.term("not")})}, "postfix-expr" : {syntax.cond_or({syntax.term("++")}, {syntax.term("--")}, {syntax.term("...")}), syntax.optional(syntax.ref("postfix-expr"))}, "prim-expr" : {syntax.cond_or({syntax.ref("visit-expr")}, {syntax.ref("constant")})}, "visit-expr" : {syntax.ref("object"), syntax.optional(syntax.cond_or({syntax.term("->")}, {syntax.term(".")}), syntax.ref("visit-expr"))}, "object" : {syntax.cond_or({syntax.ref("array"), syntax.optional(syntax.ref("index"))}, {syntax.token("str"), syntax.optional(syntax.ref("index"))}, {syntax.term("local")}, {syntax.term("global")}, {syntax.ref("ecsx-extend")}, {syntax.ref("element")}, {syntax.token("char")})}, "ecsx-extend" : {syntax.token("id"), syntax.nlook(syntax.token("endl")), syntax.term("::"), syntax.token("id"), syntax.term("("), syntax.optional(syntax.ref("basic-expr")), syntax.term(")")}, "element" : {syntax.cond_or({syntax.token("id")}, {syntax.term("("), syntax.ref("basic-expr"), syntax.term(")")}), syntax.repeat(syntax.nlook(syntax.token("endl")), syntax.cond_or({syntax.ref("fcall")}, {syntax.ref("index")}))}, "constant" : {syntax.cond_or({syntax.token("num")}, {syntax.term("null")}, {syntax.term("true")}, {syntax.term("false")})}, "array" : {syntax.term("{"), syntax.optional(syntax.ref("expr")), syntax.term("}")}, "fcall" : {syntax.term("("), syntax.optional(syntax.ref("expr")), syntax.term(")")}, "index" : {syntax.cond_or({syntax.term("["), syntax.optional(syntax.ref("add-expr")), syntax.optional(syntax.term(":"), syntax.optional(syntax.ref("add-expr")), syntax.optional(syntax.term(":"), syntax.optional(syntax.ref("add-expr")))), syntax.term("]")}, {syntax.term("["), syntax.term("::"), syntax.term("]")})}}.to_hash_map()
var grammar = new parsergen.grammar
grammar.ext = ".*\\.(csc)"
grammar.lex = get_lexical(regex.build, "ASCII")
grammar.stx := covscript_syntax
